
import asyncio
import logging
import sqlite3
import os
import sys
import tempfile
import base64
from enum import Enum
from typing import Dict, Any, Tuple
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç –∏–∑ dotenv –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv

# Aiogram imports
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.media_group import MediaGroupBuilder

# Gemini imports
from google import genai
from google.genai import types
from google.api_core import exceptions
from PIL import Image
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ADMIN_ID –≤ —á–∏—Å–ª–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 (–Ω–∏–∫—Ç–æ –Ω–µ –∞–¥–º–∏–Ω)
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "@bnbslow")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    sys.exit(1)

if not GEMINI_API_KEY:
    print("‚ùå GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ, –Ω–æ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
name = "FashionBot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(name)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('fashion_bot.db', check_same_thread=False)
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            balance INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS generations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            prompt TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

init_db()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è ---

class GenderType(Enum):
    WOMEN = "–∂–µ–Ω—Å–∫–∞—è"
    MEN = "–º—É–∂—Å–∫–∞—è"
    KIDS = "–¥–µ—Ç—Å–∫–∞—è"
    DISPLAY = "–≤–∏—Ç—Ä–∏–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"

class LocationType(Enum):
    STREET = "–£–ª–∏—Ü–∞"
    STUDIO = "–§–æ—Ç–æ—Å—Ç—É–¥–∏—è"
    FLOOR_ZONE = "–§–æ—Ç–æ–∑–æ–Ω–∞ –Ω–∞ –ø–æ–ª—É"

class AgeGroup(Enum):
    WOMEN_MEN = ["18-20", "22-28", "32-40", "42-55"]
    KIDS = ["0.3-1", "2-4", "7-10", "13-17"]

class SizeType(Enum):
    SIZE_42_46 = "42-46"
    SIZE_50_54 = "50-54"
    SIZE_58_64 = "58-64"
    SIZE_64_68 = "64-68"

class LocationStyle(Enum):
    NEW_YEAR = "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"
    SUMMER = "–õ–µ—Ç–æ"
    NATURE = "–ü—Ä–∏—Ä–æ–¥–∞"
    PARK_WINTER = "–ü–∞—Ä–∫ (–∑–∏–º–∞)"
    PARK_SUMMER = "–ü–∞—Ä–∫ (–ª–µ—Ç–æ)"
    REGULAR = "–æ–±—ã—á–Ω—ã–π"
    CAR = "–†—è–¥–æ–º —Å –º–∞—à–∏–Ω–æ–π"

class PoseType(Enum):
    SITTING = "–°–∏–¥—è"
    STANDING = "–°—Ç–æ—è"

class ViewType(Enum):
    BACK = "–°–∑–∞–¥–∏"
    FRONT = "–ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å"

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProductCreationStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_photo = State()
    waiting_for_height = State()
    waiting_for_location = State()
    waiting_for_age = State()
    waiting_for_size = State()
    waiting_for_location_style = State()
    waiting_for_pose = State()
    waiting_for_view = State()
    waiting_for_confirmation = State()

# --- –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞) ---

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('fashion_bot.db', check_same_thread=False)
        self.cursor = self.conn.cursor()

    def get_user_balance(self, user_id: int) -> int:
        self.cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        result = self.cursor.fetchone()
        if result:
            return result[0]
        else:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.cursor.execute(
                'INSERT INTO users (user_id, balance) VALUES (?, ?)',
                (user_id, 0)
            )
            self.conn.commit()
            return 0

    def update_user_balance(self, user_id: int, balance: int):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º REPLACE, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.cursor.execute(
            'INSERT OR REPLACE INTO users (user_id, balance) VALUES (?, ?)',
            (user_id, balance)
        )
        self.conn.commit()

    def add_generation(self, user_id: int, prompt: str):
        self.cursor.execute(
            'INSERT INTO generations (user_id, prompt) VALUES (?, ?)',
            (user_id, prompt)
        )
        self.conn.commit()

    def get_user_generations_count(self, user_id: int) -> int:
        self.cursor.execute(
            'SELECT COUNT(*) FROM generations WHERE user_id = ?',
            (user_id,)
        )
        return self.cursor.fetchone()[0]

    def get_all_users_stats(self) -> Tuple[int, int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (total_users, total_generations, total_balance)"""
        self.cursor.execute('SELECT COUNT(*) FROM users')
        total_users = self.cursor.fetchone()[0]

        self.cursor.execute('SELECT COUNT(*) FROM generations')
        total_generations = self.cursor.fetchone()[0]

        self.cursor.execute('SELECT SUM(balance) FROM users')
        total_balance = self.cursor.fetchone()[0] or 0

        return total_users, total_generations, total_balance

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ API Gemini ---

def call_nano_banana_api(
    input_image_path: str,
    prompt: str,
    extra_params: Dict[str, Any] = None
) -> bytes:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–º–ø—Ç –≤ Gemini 2.5 Flash Image –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–π—Ç—ã.
    """

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω)
    client = genai.Client(api_key=GEMINI_API_KEY)

    # 2. –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        input_image = Image.open(input_image_path)
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # 3. –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
    # üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'config' –≤–º–µ—Å—Ç–æ 'generation_config'
    api_config = extra_params if extra_params is not None else {}

    # –§–æ—Ä–º–∏—Ä—É–µ–º 'config', –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if 'config' not in api_config:
        api_config['config'] = {
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç (—Ö–æ—Ç—è –æ–∂–∏–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ API Gemini –æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            # —É–∫–∞–∑—ã–≤–∞—Ç—å response_modalities. –≠—Ç–æ—Ç –∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à–Ω–∏–º.
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
            "response_modalities": ['TEXT', 'IMAGE']
        }

    response = client.models.generate_content(
        model="gemini-2.5-flash-image",
        contents=[prompt, input_image],
        config=api_config.get('config') # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ 'config'
    )

    # 4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    if not response.candidates:
        raise Exception("API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (candidates).")

    candidate = response.candidates[0]

    # 1. –ò—â–µ–º —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (inline_data —Å –±–∞–π—Ç–∞–º–∏ 'data')
    image_part = next(
        (
            p for p in candidate.content.parts
            if hasattr(p, 'inline_data') and hasattr(p.inline_data, 'data')
        ),
        None
    )

    if image_part is None:
        # 2. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫—É –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É)
        text_explanation = ""
        for part in candidate.content.parts:
            if hasattr(part, 'text'):
                text_explanation += part.text + "\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, SAFETY)
        finish_reason = candidate.finish_reason.name if hasattr(candidate, 'finish_reason') else "UNKNOWN"

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if text_explanation.strip():
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—à–∏–±–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            raise Exception(
                f"Gemini –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {finish_reason}. "
                f"–¢–µ–∫—Å—Ç: {text_explanation.strip()}"
            )

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
        raise Exception(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {finish_reason}.")

    # 3. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ (image_part != None), –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    inline_data = image_part.inline_data
    data_content = inline_data.data

    if isinstance(data_content, str):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ Base64 –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
        try:
            output_image_bytes = base64.b64decode(data_content)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64. –û—à–∏–±–∫–∞: {e}")

    elif isinstance(data_content, bytes):
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –±–∞–π—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
        output_image_bytes = data_content

    else:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (—Ö–æ—Ç—è —ç—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–µ–Ω)
        raise Exception(f"–û–±—ä–µ–∫—Ç inline_data.data –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(data_content)}. –û–∂–∏–¥–∞–ª–∏—Å—å str (Base64) –∏–ª–∏ bytes.")

    return output_image_bytes

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
def generate_demo_image(prompt: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    from PIL import Image, ImageDraw

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    img = Image.new('RGB', (1024, 1024), color=(73, 109, 137))
    d = ImageDraw.Draw(img)

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        font = ImageFont.load_default(size=40)
    except ImportError:
        font = None

    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text = "–î–ï–ú–û-–†–ï–ñ–ò–ú\n\nGemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n–ü—Ä–æ–º–ø—Ç:\n" + prompt[:300] + "..."

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = []
    current_line = ""
    for word in text.split():
        if len(current_line + word) > 40: # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            lines.append(current_line)
            current_line = word + " "
        else:
            current_line += word + " "
    lines.append(current_line)

    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    y = 50
    for line in lines:
        d.text((50, y), line, fill=(255, 255, 255), font=font)
        y += 45

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bytes
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG')
    return img_byte_arr.getvalue()


# --- –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---

class FashionBot:
    def __init__(self, token: str): # –ò–∑–º–µ–Ω–µ–Ω–æ init –Ω–∞ __init__
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.db = Database()
        self.setup_handlers()

    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
        self.dp.message.register(self.start_handler, Command("start"))

        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–æ)
        self.dp.message.register(self.add_balance_handler, Command("add_balance"))
        self.dp.message.register(self.stats_handler, Command("stats"))

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.callback_query.register(self.accept_terms_handler, F.data == "accept_terms")
        self.dp.callback_query.register(self.support_handler, F.data == "support")
        self.dp.callback_query.register(self.create_photo_handler, F.data == "create_photo")
        self.dp.callback_query.register(self.topup_balance_handler, F.data == "topup_balance")
        self.dp.callback_query.register(self.back_to_main_handler, F.data == "back_to_main")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        self.dp.callback_query.register(self.gender_select_handler, F.data.startswith("gender_"))
        self.dp.message.register(self.photo_handler, StateFilter(ProductCreationStates.waiting_for_photo), F.photo)
        self.dp.message.register(self.handle_wrong_photo_input, StateFilter(ProductCreationStates.waiting_for_photo)) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–æ—Ç–æ
        self.dp.message.register(self.height_handler, StateFilter(ProductCreationStates.waiting_for_height))
        self.dp.callback_query.register(self.location_handler, F.data.startswith("location_"))
        self.dp.callback_query.register(self.age_handler, F.data.startswith("age_"))
        self.dp.callback_query.register(self.size_handler, F.data.startswith("size_"))
        self.dp.callback_query.register(self.location_style_handler, F.data.startswith("style_"))
        self.dp.callback_query.register(self.pose_handler, F.data.startswith("pose_"))
        self.dp.callback_query.register(self.view_handler, F.data.startswith("view_"))
        self.dp.callback_query.register(self.confirmation_handler, F.data.startswith("confirm_"))

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ FSM ---

    async def generate_summary(self, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        gender = data.get('gender')

        summary = []
        summary.append(f"–¢–∏–ø: **{gender.value}**")

        if gender == GenderType.DISPLAY:
            return "\n".join(summary)

        summary.append(f"–†–æ—Å—Ç: **{data.get('height', 'N/A')} —Å–º**")
        summary.append(f"–õ–æ–∫–∞—Ü–∏—è: **{data.get('location', LocationType.STREET).value}**")
        summary.append(f"–í–æ–∑—Ä–∞—Å—Ç: **{data.get('age', 'N/A')}**")
        if data.get('size'):
            summary.append(f"–†–∞–∑–º–µ—Ä: **{data.get('size', SizeType.SIZE_42_46).value}**")
        summary.append(f"–°—Ç–∏–ª—å: **{data.get('location_style', LocationStyle.REGULAR).value}**")
        summary.append(f"–ü–æ–∑–∞: **{data.get('pose', PoseType.STANDING).value}**")
        summary.append(f"–í–∏–¥: **{data.get('view', ViewType.FRONT).value}**")

        return "\n".join(summary)

    async def generate_prompt(self, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini API –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."""
        gender = data.get('gender')

        if gender == GenderType.DISPLAY:
            return (
                "Replace the background of this product image with a stylish, modern, minimalist display zone, "
                "like a smooth white floor or a light-colored wooden table, focused on the product. "
                "Ensure the product is clearly the main subject. "
                "Remove any distractions like shadows or wrinkles from the background. "
                "The image should be high-resolution and professionally lit for e-commerce. "
                "Do not add any human model."
            )

        prompt = "Generate a hyper-realistic, high-quality professional fashion photo for e-commerce. "

        # –ú–æ–¥–µ–ª—å
        gender_map = {
            GenderType.WOMEN: "a realistic female model wearing the garment",
            GenderType.MEN: "a realistic male model wearing the garment",
            GenderType.KIDS: f"a realistic child model (age {data.get('age', '5')}) wearing the garment"
        }

        prompt += gender_map.get(gender, "a model wearing the garment") + ". "

        # –î–µ—Ç–∞–ª–∏
        if data.get('height'):
            prompt += f"Model height: {data['height']}cm. "
        if data.get('size'):
            prompt += f"Model garment size: {data['size'].value}. "
        if data.get('age') and gender != GenderType.KIDS:
            prompt += f"Model appearance age: {data['age']}. "

        # –ü–æ–∑–∞ –∏ –í–∏–¥
        prompt += f"Pose: {data.get('pose', PoseType.STANDING).value.lower()}. "
        prompt += f"View: {data.get('view', ViewType.FRONT).value.lower()}. "

        # –õ–æ–∫–∞—Ü–∏—è –∏ –°—Ç–∏–ª—å
        location = data.get('location', LocationType.STUDIO)
        style = data.get('location_style', LocationStyle.REGULAR)

        location_desc = {
            LocationType.STREET: "Location: urban street photography style background, high-end commercial photo.",
            LocationType.STUDIO: "Location: professional photo studio, solid light background, soft lighting.",
            LocationType.FLOOR_ZONE: "Location: styled floor photo zone, flat lay composition or model sitting on the floor."
        }.get(location, "Location: professional photo environment.")

        prompt += location_desc + " "

        style_desc = {
            LocationStyle.NEW_YEAR: "Theme: luxury Christmas/New Year setting, festive decorations, warm lights.",
            LocationStyle.SUMMER: "Theme: vibrant summer atmosphere, bright sunlight, beach or sunny city setting.",
            LocationStyle.NATURE: "Theme: natural outdoor setting, green foliage, soft natural light.",
            LocationStyle.PARK_WINTER: "Theme: winter park scene, soft snow, cold colors.",
            LocationStyle.PARK_SUMMER: "Theme: lush green park, sunny day.",
            LocationStyle.REGULAR: "Theme: neutral fashion theme.",
            LocationStyle.CAR: "Theme: next to a luxury car, high-fashion editorial style."
        }.get(style, "")

        prompt += style_desc + " "

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Gemini
        prompt += (
            "Use the input image only as a reference for the garment and texture. The generated photo must look "
            "like a real photograph taken by a professional fashion photographer. "
            "Natural skin, realistic hands, perfect lighting. "
            "Remove the background from the input image and perfectly integrate the garment onto the model. "
            "Do not use cartoon, 3D render, or drawing styles. "
            "The final image should be a single, stunning photograph."
        )

        return prompt.strip()

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

    async def start_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Fashion AI Generator**!\n\n"
            "–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–π –æ–¥–µ–∂–¥—ã –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ –Ω–∞ –º–æ–¥–µ–ª—è—Ö.\n\n"
            "üìã –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å:\n"
            "1. –£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "2. –°–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="accept_terms")
        builder.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")
        builder.adjust(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        self.db.get_user_balance(message.from_user.id)

        await message.answer(welcome_text, reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def accept_terms_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π"""
        await callback.message.delete()
        await self.show_main_menu(callback.message)

    async def show_main_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = message.from_user.id
        current_balance = self.db.get_user_balance(user_id)

        main_menu_text = (
            f"üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{current_balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π**"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="üì∏ –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="create_photo")
        builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")
        builder.button(text="üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")
        builder.adjust(1)

        await message.answer(main_menu_text, reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def back_to_main_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        data = await state.get_data()
        temp_photo_path = data.get('temp_photo_path')
        if temp_photo_path and os.path.exists(temp_photo_path):
            os.unlink(temp_photo_path)
            logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_photo_path}")

        await state.clear()

        await callback.message.delete()
        await self.show_main_menu(callback.message)

    async def support_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        support_text = f"üìû –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ: **{SUPPORT_USERNAME}**"
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        await callback.message.answer(support_text, reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def topup_balance_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        user_id = callback.from_user.id
        current_balance = self.db.get_user_balance(user_id)

        balance_text = (
            f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{current_balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π**\n\n"
            "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n"
            f"**{SUPPORT_USERNAME}**\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: `{user_id}`"
        )

        builder = InlineKeyboardBuilder()
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–∞–ª—è–µ–º @)
        builder.button(text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"tg://resolve?domain={SUPPORT_USERNAME.lstrip('@')}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)

        await callback.message.answer(balance_text, reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def create_photo_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
        user_id = callback.from_user.id
        current_balance = self.db.get_user_balance(user_id)

        if current_balance <= 0 and ADMIN_ID != user_id: # –î–ª—è –∞–¥–º–∏–Ω–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–∞–∂–µ —Å 0
            builder = InlineKeyboardBuilder()
            builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            builder.adjust(1)

            await callback.message.answer(
                "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
            return

        gender_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"
        builder = InlineKeyboardBuilder()
        builder.button(text="üëö –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="gender_women")
        builder.button(text="üëî –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="gender_men")
        builder.button(text="üë∂ –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="gender_kids")
        builder.button(text="üñº –í–∏—Ç—Ä–∏–Ω–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="gender_display")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)

        await callback.message.answer(gender_text, reply_markup=builder.as_markup())

    async def gender_select_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        await callback.message.delete()

        gender_map = {
            "gender_women": GenderType.WOMEN,
            "gender_men": GenderType.MEN,
            "gender_kids": GenderType.KIDS,
            "gender_display": GenderType.DISPLAY
        }

        gender = gender_map[callback.data]
        await state.update_data(gender=gender)

        # –î–ª—è –Ω–µ-–≤–∏—Ç—Ä–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if gender != GenderType.DISPLAY:
            try:
                media_group = MediaGroupBuilder()
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã 'photo/example1.jpg' –∏ 'photo/example2.jpg' —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                photo1 = FSInputFile("photo/example1.jpg")
                photo2 = FSInputFile("photo/example2.jpg")
                media_group.add_photo(media=photo1, caption="–ü—Ä–∏–º–µ—Ä 1: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –≤ —Å—Ç—É–¥–∏–π–Ω—ã–π —Å–Ω–∏–º–æ–∫ –Ω–∞ –º–æ–¥–µ–ª–∏.")
                media_group.add_photo(media=photo2, caption="–ü—Ä–∏–º–µ—Ä 2: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ç–æ–≤–∞—Ä–∞, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –≤ —É–ª–∏—á–Ω—ã–π —Å–Ω–∏–º–æ–∫ –Ω–∞ –º–æ–¥–µ–ª–∏.")
                await callback.message.answer_media_group(media=media_group.build())
            except FileNotFoundError:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ (photo/example*.jpg). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö.")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ: {e}")


        instruction_text = (
            f"üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ **—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞** –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è {gender.value.lower()}.\n\n"
            "‚ö†Ô∏è **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:** –¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –±–ª–∏–∫–æ–≤ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–µ–π, "
            "–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ñ–æ–Ω–µ, –±–µ–∑ –º–æ–¥–µ–ª–∏.\n\n"
            f"–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {SUPPORT_USERNAME}"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="create_photo")

        await callback.message.answer(instruction_text, reply_markup=builder.as_markup(), parse_mode="Markdown")
        await state.set_state(ProductCreationStates.waiting_for_photo)

    async def handle_wrong_photo_input(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Ñ–æ—Ç–æ, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")

    async def photo_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
        # F.photo –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∑–¥–µ—Å—å –º—ã –∏–º–µ–µ–º –¥–µ–ª–æ —Å —Ñ–æ—Ç–æ
        photo_file_id = message.photo[-1].file_id

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        temp_path = None
        try:
            file = await self.bot.get_file(photo_file_id)
            file_path = file.file_path

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
            temp_path = temp_file.name
            temp_file.close()

            await self.bot.download_file(file_path, temp_path)
            await state.update_data(temp_photo_path=temp_path)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if temp_path and os.path.exists(temp_path):
                os.unlink(temp_path)
            return

        data = await state.get_data()
        gender = data['gender']

        if gender == GenderType.DISPLAY:
            # –î–ª—è –≤–∏—Ç—Ä–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            prompt = await self.generate_prompt(data)
            await state.update_data(prompt=prompt)

            summary = await self.generate_summary(data)
            summary_text = f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{summary}"

            builder = InlineKeyboardBuilder()
            builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_generate")
            builder.button(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")
            builder.adjust(1)

            await message.answer(summary_text, reply_markup=builder.as_markup(), parse_mode="Markdown")
            await state.set_state(ProductCreationStates.waiting_for_confirmation)
        else:
            await state.set_state(ProductCreationStates.waiting_for_height)
            await message.answer("üìè –ù–∞–ø–∏—à–∏—Ç–µ **—Ä–æ—Å—Ç –º–æ–¥–µ–ª–∏** (–≤ —Å–º):", parse_mode="Markdown")

    async def height_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
        height_str = message.text.strip()
        if not height_str.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞** –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):", parse_mode="Markdown")
            return

        height = int(height_str)
        if not (50 <= height <= 220): # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å
            await message.answer("‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 50 –¥–æ 220 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        await state.update_data(height=height)
        await state.set_state(ProductCreationStates.waiting_for_location)

        builder = InlineKeyboardBuilder()
        builder.button(text="üèô –£–ª–∏—Ü–∞", callback_data="location_street")
        builder.button(text="üì∏ –§–æ—Ç–æ—Å—Ç—É–¥–∏—è", callback_data="location_studio")
        builder.button(text="üìê –§–æ—Ç–æ–∑–æ–Ω–∞ –Ω–∞ –ø–æ–ª—É", callback_data="location_floor")
        builder.adjust(1)

        await message.answer("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ **–ª–æ–∫–∞—Ü–∏—é**:", reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def location_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        await callback.message.delete()

        location_map = {
            "location_street": LocationType.STREET,
            "location_studio": LocationType.STUDIO,
            "location_floor": LocationType.FLOOR_ZONE
        }

        location = location_map[callback.data]
        await state.update_data(location=location)

        data = await state.get_data()
        gender = data['gender']

        builder = InlineKeyboardBuilder()

        if gender == GenderType.KIDS:
            age_groups = AgeGroup.KIDS.value
        else:
            age_groups = AgeGroup.WOMEN_MEN.value

        for age in age_groups:
            builder.button(text=age, callback_data=f"age_{age}")

        builder.adjust(2)

        await callback.message.answer("üéÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ **–≤–æ–∑—Ä–∞—Å—Ç –º–æ–¥–µ–ª–∏**:", reply_markup=builder.as_markup(), parse_mode="Markdown")
        await state.set_state(ProductCreationStates.waiting_for_age)

    async def age_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        await callback.message.delete()

        age = callback.data.replace("age_", "")
        await state.update_data(age=age)

        data = await state.get_data()
        gender = data['gender']

        if gender == GenderType.KIDS:
            # –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
            await self.skip_size_and_go_to_style(callback, state)
        else:
            await state.set_state(ProductCreationStates.waiting_for_size)

            builder = InlineKeyboardBuilder()
            builder.button(text="42-46", callback_data="size_42_46")
            builder.button(text="50-54", callback_data="size_50_54")
            builder.button(text="58-64", callback_data="size_58_64")
            builder.button(text="64-68", callback_data="size_64_68")
            builder.adjust(2)

            await callback.message.answer("üìè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ **—Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã**:", reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def size_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
        await callback.message.delete()

        size_map = {
            "size_42_46": SizeType.SIZE_42_46,
            "size_50_54": SizeType.SIZE_50_54,
            "size_58_64": SizeType.SIZE_58_64,
            "size_64_68": SizeType.SIZE_64_68
        }

        size = size_map[callback.data]
        await state.update_data(size=size)

        await self.go_to_location_style(callback, state)

    async def skip_size_and_go_to_style(self, callback: CallbackQuery, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è (–¥–ª—è –¥–µ—Ç—Å–∫–æ–π –æ–¥–µ–∂–¥—ã, –≥–¥–µ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω)"""
        await self.go_to_location_style(callback, state)


    async def go_to_location_style(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
        await state.set_state(ProductCreationStates.waiting_for_location_style)

        builder = InlineKeyboardBuilder()
        builder.button(text="üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω—è—è", callback_data="style_new_year")
        builder.button(text="‚òÄÔ∏è –õ–µ—Ç–æ", callback_data="style_summer")
        builder.button(text="üå≥ –ü—Ä–∏—Ä–æ–¥–∞", callback_data="style_nature")
        builder.button(text="üèû –ü–∞—Ä–∫ (–∑–∏–º–∞)", callback_data="style_park_winter")
        builder.button(text="üå≤ –ü–∞—Ä–∫ (–ª–µ—Ç–æ)", callback_data="style_park_summer")
        builder.button(text="üè¢ –û–±—ã—á–Ω—ã–π (—Å—Ç—É–¥–∏—è/–≥–æ—Ä–æ–¥)", callback_data="style_regular")
        builder.button(text="üöó –†—è–¥–æ–º —Å –º–∞—à–∏–Ω–æ–π", callback_data="style_car")
        builder.adjust(2)

        await callback.message.answer("üé® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ **—Å—Ç–∏–ª—å –ª–æ–∫–∞—Ü–∏–∏**:", reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def location_style_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
        await callback.message.delete()

        style_map = {
            "style_new_year": LocationStyle.NEW_YEAR,
            "style_summer": LocationStyle.SUMMER,
            "style_nature": LocationStyle.NATURE,
            "style_park_winter": LocationStyle.PARK_WINTER,
            "style_park_summer": LocationStyle.PARK_SUMMER,
            "style_regular": LocationStyle.REGULAR,
            "style_car": LocationStyle.CAR
        }

        location_style = style_map[callback.data]
        await state.update_data(location_style=location_style)
        await state.set_state(ProductCreationStates.waiting_for_pose)

        builder = InlineKeyboardBuilder()
        builder.button(text="ü™ë –°–∏–¥—è", callback_data="pose_sitting")
        builder.button(text="üßç –°—Ç–æ—è", callback_data="pose_standing")
        builder.adjust(2)

        await callback.message.answer("üßò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ **–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–∞**:", reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def pose_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∑—ã"""
        await callback.message.delete()

        pose_map = {
            "pose_sitting": PoseType.SITTING,
            "pose_standing": PoseType.STANDING
        }

        pose = pose_map[callback.data]
        await state.update_data(pose=pose)
        await state.set_state(ProductCreationStates.waiting_for_view)

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –°–∑–∞–¥–∏", callback_data="view_back")
        builder.button(text="üë§ –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å", callback_data="view_front")
        builder.adjust(2)

        await callback.message.answer("üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ **–≤–∏–¥**:", reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def view_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞"""
        await callback.message.delete()

        view_map = {
            "view_back": ViewType.BACK,
            "view_front": ViewType.FRONT
        }

        view = view_map[callback.data]
        await state.update_data(view=view)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∏ –ø—Ä–æ–º–ø—Ç
        data = await state.get_data()
        summary = await self.generate_summary(data)
        prompt = await self.generate_prompt(data)

        await state.update_data(prompt=prompt)

        summary_text = (
            f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
            f"{summary}\n\n"
            f"**–°—Ç–æ–∏–º–æ—Å—Ç—å: 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è**"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_generate")
        builder.button(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")
        builder.adjust(1)

        await callback.message.answer(summary_text, reply_markup=builder.as_markup(), parse_mode="Markdown")
        await state.set_state(ProductCreationStates.waiting_for_confirmation)

    async def confirmation_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        await callback.message.delete()
        user_id = callback.from_user.id
        current_balance = self.db.get_user_balance(user_id)

        data = await state.get_data()
        temp_photo_path = data.get('temp_photo_path')

        if callback.data == "confirm_generate":

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ —Ç—Ä–∞—Ç–æ–π
            if current_balance <= 0 and ADMIN_ID != user_id:
                await callback.message.answer("‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π**. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", parse_mode="Markdown")
                await state.clear()
                return

            if current_balance > 0:
                new_balance = current_balance - 1
                self.db.update_user_balance(user_id, new_balance)
            else: # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º 0
                new_balance = 0

            prompt = data.get('prompt', '')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generating_msg = await callback.message.answer(
                f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞—Å—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 20 —Å–µ–∫—É–Ω–¥.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: **{new_balance}**"
            )

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini API –∏–ª–∏ –¥–µ–º–æ-—Ä–µ–∂–∏–º
                if GEMINI_API_KEY:
                    processed_image_bytes = call_nano_banana_api(temp_photo_path, prompt)
                else:
                    processed_image_bytes = generate_demo_image(prompt)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                generated_image = BufferedInputFile(processed_image_bytes, filename="generated_fashion.png")

                await callback.message.answer_photo(
                    generated_image,
                    caption="‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ **—É—Å–ø–µ—à–Ω–æ**!"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.db.add_generation(user_id, prompt)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ API –∏ —ç—Ç–æ –Ω–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º
                if GEMINI_API_KEY and current_balance > 0:
                    self.db.update_user_balance(user_id, current_balance)
                    error_footer = "–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª **–≤–æ–∑–≤—Ä–∞—â–µ–Ω**."
                else:
                    error_footer = "–ë–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª —Å–ø–∏—Å–∞–Ω (–¥–µ–º–æ-—Ä–µ–∂–∏–º –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å)."

                await callback.message.answer(
                    f"‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n"
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É: `{str(e)[:150]}...`\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {SUPPORT_USERNAME}.\n\n"
                    f"{error_footer}",
                    parse_mode="Markdown"
                )

            finally:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                try:
                    await generating_msg.delete()
                except Exception:
                    pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if temp_photo_path and os.path.exists(temp_photo_path):
                    os.unlink(temp_photo_path)

        elif callback.data == "confirm_edit":
            # –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É FSM (–≤—ã–±–æ—Ä—É –ø–æ–ª–∞)
            # –ü—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –≤ back_to_main_handler
            await self.back_to_main_handler(callback, state)
            return

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM
        await state.clear()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏
        await self.show_main_menu(callback.message)

    # --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–î–æ–ø–æ–ª–Ω–µ–Ω–æ) ---

    async def add_balance_handler(self, message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        try:
            # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: /add_balance <user_id> <amount>
            _, user_id_str, amount_str = message.text.split()
            user_id = int(user_id_str)
            amount = int(amount_str)

            current_balance = self.db.get_user_balance(user_id)
            new_balance = current_balance + amount
            self.db.update_user_balance(user_id, new_balance)

            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{user_id}** –¥–æ–±–∞–≤–ª–µ–Ω–æ **{amount}** –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{new_balance}**.",
                parse_mode="Markdown"
            )
        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_balance ID –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ`", parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")


    async def stats_handler(self, message: Message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        try:
            total_users, total_generations, total_balance = self.db.get_all_users_stats()

            stats_text = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**\n\n"
                f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
                f"üì∏ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: **{total_generations}**\n"
                f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å (–æ—Å—Ç–∞—Ç–æ–∫): **{total_balance}** –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
            )

            await message.answer(stats_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("‚ö°Ô∏è –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        try:
            me = await self.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN: {e}")
            return

        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        await self.dp.start_polling(self.bot)

if __name__ == "__main__":
    if BOT_TOKEN:
        bot_instance = FashionBot(token=BOT_TOKEN)
        try:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥–ª—è –¥–µ–º–æ-—Ñ–∞–π–ª–æ–≤)
            if not os.path.exists('photo'):
                os.makedirs('photo')
                logger.warning("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ 'photo/'. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ example1.jpg –∏ example2.jpg –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–æ–≤.")

            asyncio.run(bot_instance.run())
        except KeyboardInterrupt:
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")