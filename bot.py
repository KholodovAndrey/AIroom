
import asyncio
import logging
import sqlite3
import os
import sys
import tempfile
import base64
import json
from enum import Enum
from typing import Dict, Any
from dataclasses import dataclass
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.media_group import MediaGroupBuilder

# Gemini imports
from google import genai
from google.api_core import exceptions
from google.genai import types # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ block_reason
from PIL import Image, ImageDraw # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ImageDraw –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
import io

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
SUPPORT_USERNAME = os.getenv("SUPPORT_USERNAME", "@bnbslow")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
GEMINI_DEMO_MODE = False # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    sys.exit(1)

if not GEMINI_API_KEY:
    print("‚ùå GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    # sys.exit(1) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('fashion_bot.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            balance INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS generations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            prompt TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')

    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

init_db()

class GenderType(Enum):
    WOMEN = "–∂–µ–Ω—Å–∫–∞—è"
    MEN = "–º—É–∂—Å–∫–∞—è"
    KIDS = "–¥–µ—Ç—Å–∫–∞—è"
    DISPLAY = "–≤–∏—Ç—Ä–∏–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"

class LocationType(Enum):
    STREET = "–£–ª–∏—Ü–∞"
    STUDIO = "–§–æ—Ç–æ—Å—Ç—É–¥–∏—è"
    FLOOR_ZONE = "–§–æ—Ç–æ–∑–æ–Ω–∞ –Ω–∞ –ø–æ–ª—É"

class AgeGroup(Enum):
    WOMEN_MEN = ["18-20", "22-28", "32-40", "42-55"]
    KIDS = ["0.3-1", "2-4", "7-10", "13-17"]

class SizeType(Enum):
    SIZE_42_46 = "42-46"
    SIZE_50_54 = "50-54"
    SIZE_58_64 = "58-64"
    SIZE_64_68 = "64-68"

class LocationStyle(Enum):
    NEW_YEAR = "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"
    SUMMER = "–õ–µ—Ç–æ"
    NATURE = "–ü—Ä–∏—Ä–æ–¥–∞"
    PARK_WINTER = "–ü–∞—Ä–∫ (–∑–∏–º–∞)"
    PARK_SUMMER = "–ü–∞—Ä–∫ (–ª–µ—Ç–æ)"
    REGULAR = "–æ–±—ã—á–Ω—ã–π"
    CAR = "–†—è–¥–æ–º —Å –º–∞—à–∏–Ω–æ–π"

class PoseType(Enum):
    SITTING = "–°–∏–¥—è"
    STANDING = "–°—Ç–æ—è"

class ViewType(Enum):
    BACK = "–°–∑–∞–¥–∏"
    FRONT = "–ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å"

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProductCreationStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_photo = State()
    waiting_for_height = State()
    waiting_for_location = State()
    waiting_for_age = State()
    waiting_for_size = State()
    waiting_for_location_style = State()
    waiting_for_pose = State()
    waiting_for_view = State()
    waiting_for_confirmation = State()

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('fashion_bot.db', check_same_thread=False)
        self.cursor = self.conn.cursor()

    def get_user_balance(self, user_id: int) -> int:
        self.cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
        result = self.cursor.fetchone()
        if result:
            return result[0]
        else:
            self.cursor.execute(
                'INSERT OR IGNORE INTO users (user_id, balance) VALUES (?, 0)',
                (user_id,)
            )
            self.conn.commit()
            return 0

    def update_user_balance(self, user_id: int, balance: int):
        self.cursor.execute(
            'INSERT OR REPLACE INTO users (user_id, balance) VALUES (?, ?)',
            (user_id, balance)
        )
        self.conn.commit()

    def add_generation(self, user_id: int, prompt: str):
        self.cursor.execute(
            'INSERT INTO generations (user_id, prompt) VALUES (?, ?)',
            (user_id, prompt)
        )
        self.conn.commit()

    def get_user_generations_count(self, user_id: int) -> int:
        self.cursor.execute(
            'SELECT COUNT(*) FROM generations WHERE user_id = ?',
            (user_id,)
        )
        return self.cursor.fetchone()[0]

    def get_all_users_stats(self):
        self.cursor.execute('SELECT COUNT(*) FROM users')
        total_users = self.cursor.fetchone()[0]

        self.cursor.execute('SELECT COUNT(*) FROM generations')
        total_generations = self.cursor.fetchone()[0]

        self.cursor.execute('SELECT SUM(balance) FROM users')
        total_balance = self.cursor.fetchone()[0] or 0

        return total_users, total_generations, total_balance

# --- –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ API Gemini (–ò–°–ü–†–ê–í–õ–ï–ù–ê –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è) ---
def call_nano_banana_api(
    input_image_path: str,
    prompt: str,
    extra_params: Dict[str, Any] = None
) -> bytes:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–º–ø—Ç –≤ Gemini 2.5 Flash Image –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–π—Ç—ã.
    """
    if GEMINI_DEMO_MODE:
        # üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ImageDraw –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.new('RGB', (1024, 1024), color=(73, 109, 137))
        d = ImageDraw.Draw(img)
        d.text((50, 50), "–î–ï–ú–û-–†–ï–ñ–ò–ú. –ü—Ä–æ–º–ø—Ç: " + prompt[:100] + "...", fill=(255, 255, 255))
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()

    client = genai.Client(api_key=GEMINI_API_KEY)
    input_image = Image.open(input_image_path)

    api_config = extra_params if extra_params is not None else {}
    if 'config' not in api_config:
        api_config['config'] = {"response_modalities": ['TEXT', 'IMAGE']}

    try:
        response = client.models.generate_content(
            model="gemini-2.5-flash-image",
            contents=[prompt, input_image],
            config=api_config.get('config')
        )
    except exceptions.GoogleAPICallError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API Gemini: {e}")
        raise Exception(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API Gemini: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API Gemini: {e}")
        raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API Gemini: {e}")

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ---

    if not response.candidates:
        # üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ types.BlockReason –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if hasattr(response, 'prompt_feedback') and response.prompt_feedback.block_reason != types.BlockReason.BLOCK_REASON_UNSPECIFIED:
             raise Exception(f"–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {response.prompt_feedback.block_reason.name}")
        raise Exception("API –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (candidates) –∏ –Ω–µ —É–∫–∞–∑–∞–ª –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

    candidate = response.candidates[0]

    # üí° –ù–∞–¥–µ–∂–Ω—ã–π –ø–æ–∏—Å–∫ —á–∞—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π inline_data.data (–±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    image_part = None
    for part in candidate.content.parts:
        if hasattr(part, 'inline_data') and hasattr(part.inline_data, 'data'):
            image_part = part
            break

    if image_part is None:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        text_explanation = "\n".join([p.text for p in candidate.content.parts if hasattr(p, 'text') and p.text])
        finish_reason = candidate.finish_reason.name if hasattr(candidate, 'finish_reason') else "UNKNOWN"

        error_msg = f"API –Ω–µ –≤–µ—Ä–Ω—É–ª inline_data. –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {finish_reason}. "
        if text_explanation.strip():
             error_msg += f"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç: {text_explanation.strip()[:150]}..."

        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è inline_data: {error_msg}")
        raise Exception(error_msg)

    # --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ ---
    inline_data = image_part.inline_data
    data_content = inline_data.data
    mime_type = getattr(inline_data, 'mime_type', 'N/A')

    logger.info(f"DEBUG: MIME Type from API: {mime_type}")
    logger.info(f"DEBUG: Data content type: {type(data_content)}")

    if isinstance(data_content, str):
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ Base64
        try:
            output_image_bytes = base64.b64decode(data_content)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64. –û—à–∏–±–∫–∞: {e}")

    elif isinstance(data_content, bytes):
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ - —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ª–æ–≥–µ)
        output_image_bytes = data_content

    else:
        raise Exception(f"–û–±—ä–µ–∫—Ç inline_data.data –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(data_content)}. –û–∂–∏–¥–∞–ª–∏—Å—å str (Base64) –∏–ª–∏ bytes.")

    if len(output_image_bytes) == 0:
        logger.error("--- DEBUG: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª–∏–Ω–∞ 0). ---")
        raise Exception("API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª–∏–Ω–∞ 0).")

    logger.info(f"DEBUG: Successfully extracted bytes. Size: {len(output_image_bytes)} bytes.")

    return output_image_bytes

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
def generate_demo_image(prompt: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    from PIL import Image, ImageDraw
    import io

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    img = Image.new('RGB', (512, 512), color=(73, 109, 137))
    d = ImageDraw.Draw(img)

    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text = "–î–µ–º–æ-—Ä–µ–∂–∏–º\n\n–ü—Ä–æ–º–ø—Ç:\n" + prompt[:100] + "..."

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = []
    words = text.split()
    line = ""
    for word in words:
        test_line = line + word + " "
        if len(test_line) > 30:
            lines.append(line)
            line = word + " "
        else:
            line = test_line
    if line:
        lines.append(line)

    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    y = 50
    for line in lines:
        d.text((50, y), line, fill=(255, 255, 255))
        y += 30

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bytes
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='JPEG')
    return img_byte_arr.getvalue()


class FashionBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.db = Database()
        self.setup_handlers()

    def setup_handlers(self):
        # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
        self.dp.message.register(self.start_handler, Command("start"))

        # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.dp.message.register(self.add_balance_handler, Command("add_balance"))
        self.dp.message.register(self.stats_handler, Command("stats"))

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dp.callback_query.register(self.accept_terms_handler, F.data == "accept_terms")
        self.dp.callback_query.register(self.support_handler, F.data == "support")
        self.dp.callback_query.register(self.create_photo_handler, F.data == "create_photo")
        self.dp.callback_query.register(self.topup_balance_handler, F.data == "topup_balance")
        self.dp.callback_query.register(self.back_to_main_handler, F.data == "back_to_main")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        self.dp.callback_query.register(self.gender_select_handler, F.data.startswith("gender_"))
        self.dp.message.register(self.photo_handler, StateFilter(ProductCreationStates.waiting_for_photo))
        self.dp.message.register(self.height_handler, StateFilter(ProductCreationStates.waiting_for_height))
        self.dp.callback_query.register(self.location_handler, F.data.startswith("location_"))
        self.dp.callback_query.register(self.age_handler, F.data.startswith("age_"))
        self.dp.callback_query.register(self.size_handler, F.data.startswith("size_"))
        self.dp.callback_query.register(self.location_style_handler, F.data.startswith("style_"))
        self.dp.callback_query.register(self.pose_handler, F.data.startswith("pose_"))
        self.dp.callback_query.register(self.view_handler, F.data.startswith("view_"))
        self.dp.callback_query.register(self.confirmation_handler, F.data.startswith("confirm_"))

    async def start_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fashion AI Generator!\n\n"
            "–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–π –æ–¥–µ–∂–¥—ã –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ –Ω–∞ –º–æ–¥–µ–ª—è—Ö.\n\n"
            "üìã –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å:\n"
            "1. –£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "2. –°–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="accept_terms")
        builder.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")
        builder.adjust(1)

        await message.answer(welcome_text, reply_markup=builder.as_markup())

    async def accept_terms_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π"""
        await callback.message.delete()
        await self.show_main_menu(callback.message)

    async def show_main_menu(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        main_menu_text = "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
        builder = InlineKeyboardBuilder()
        builder.button(text="üì∏ –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="create_photo")
        builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")
        builder.button(text="üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="support")
        builder.adjust(1)

        await message.answer(main_menu_text, reply_markup=builder.as_markup())

    async def back_to_main_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.message.delete()
        await self.show_main_menu(callback.message)

    async def support_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        support_text = f"üìû –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ: {SUPPORT_USERNAME}"
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        await callback.message.answer(support_text, reply_markup=builder.as_markup())

    async def topup_balance_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        user_id = callback.from_user.id
        current_balance = self.db.get_user_balance(user_id)

        balance_text = (
            f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n\n"
            "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n"
            f"{SUPPORT_USERNAME}\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: `{user_id}`"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="üìû –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"tg://resolve?domain={SUPPORT_USERNAME[1:]}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)

        await callback.message.answer(balance_text, reply_markup=builder.as_markup(), parse_mode="Markdown")

    async def create_photo_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
        user_id = callback.from_user.id
        current_balance = self.db.get_user_balance(user_id)

        if current_balance <= 0:
            builder = InlineKeyboardBuilder()
            builder.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_balance")
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            builder.adjust(1)

            await callback.message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
                reply_markup=builder.as_markup()
            )
            return

        gender_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"
        builder = InlineKeyboardBuilder()
        builder.button(text="üëö –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="gender_women")
        builder.button(text="üëî –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="gender_men")
        builder.button(text="üë∂ –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", callback_data="gender_kids")
        builder.button(text="üñºÔ∏è –í–∏—Ç—Ä–∏–Ω–Ω–æ–µ —Ñ–æ—Ç–æ", callback_data="gender_display")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        builder.adjust(1)

        await callback.message.answer(gender_text, reply_markup=builder.as_markup())

    async def gender_select_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        gender_map = {
            "gender_women": GenderType.WOMEN,
            "gender_men": GenderType.MEN,
            "gender_kids": GenderType.KIDS,
            "gender_display": GenderType.DISPLAY
        }

        gender = gender_map[callback.data]
        await state.update_data(gender=gender)

        # –î–ª—è –≤–∏—Ç—Ä–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if gender != GenderType.DISPLAY:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ
            try:
                # ‚ùó –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª—ã 'photo/example1.jpg' –∏ 'photo/example2.jpg' —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                media_group = MediaGroupBuilder()
                photo1 = FSInputFile("photo/example1.jpg")
                photo2 = FSInputFile("photo/example2.jpg")
                media_group.add_photo(media=photo1)
                media_group.add_photo(media=photo2)
                await callback.message.answer_media_group(media=media_group.build())
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ: {e}")
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        if gender == GenderType.DISPLAY:
            instruction_text = (
                "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ç—Ä–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ.\n\n"
                "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ "
                "–±–µ–∑ –ª–∏—à–Ω–∏—Ö –±–ª–∏–∫–æ–≤ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–µ–π.\n\n"
                f"–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {SUPPORT_USERNAME}"
            )
        else:
            instruction_text = (
                "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n\n"
                "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ "
                "–±–µ–∑ –ª–∏—à–Ω–∏—Ö –±–ª–∏–∫–æ–≤ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–µ–π.\n\n"
                f"–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {SUPPORT_USERNAME}"
            )

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="create_photo")

        await callback.message.answer(instruction_text, reply_markup=builder.as_markup())
        await state.set_state(ProductCreationStates.waiting_for_photo)

    async def photo_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
        if not message.photo:
            await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")
            return

        photo_file_id = message.photo[-1].file_id
        await state.update_data(photo_file_id=photo_file_id)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        temp_path = None
        try:
            file = await self.bot.get_file(photo_file_id)
            file_path = file.file_path

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
            temp_path = temp_file.name
            temp_file.close()

            await self.bot.download_file(file_path, temp_path)
            await state.update_data(temp_photo_path=temp_path)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if temp_path and os.path.exists(temp_path):
                 os.unlink(temp_path)
            return

        data = await state.get_data()
        gender = data['gender']

        if gender == GenderType.DISPLAY:
            # –î–ª—è –≤–∏—Ç—Ä–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            # ‚ùó –ó–¥–µ—Å—å –Ω—É–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ generate_prompt –∏ generate_summary, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ
            # –î–æ–±–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
            prompt = await self.generate_prompt(data)
            await state.update_data(prompt=prompt)

            user_id = message.from_user.id
            self.db.add_generation(user_id, prompt)

            summary = await self.generate_summary(data)
            summary_text = f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{summary}"

            builder = InlineKeyboardBuilder()
            builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_generate")
            builder.button(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")
            builder.adjust(1)

            await message.answer(summary_text, reply_markup=builder.as_markup())
            await state.set_state(ProductCreationStates.waiting_for_confirmation)
        else:
            await state.set_state(ProductCreationStates.waiting_for_height)
            await message.answer("üìè –ù–∞–ø–∏—à–∏—Ç–µ —Ä–æ—Å—Ç –º–æ–¥–µ–ª–∏ (–≤ —Å–º):")

    async def height_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
        height = message.text
        if not height.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤ —Å–º:")
            return

        await state.update_data(height=height)
        await state.set_state(ProductCreationStates.waiting_for_location)

        builder = InlineKeyboardBuilder()
        builder.button(text="üèôÔ∏è –£–ª–∏—Ü–∞", callback_data="location_street")
        builder.button(text="üì∏ –§–æ—Ç–æ—Å—Ç—É–¥–∏—è", callback_data="location_studio")
        builder.button(text="üìê –§–æ—Ç–æ–∑–æ–Ω–∞ –Ω–∞ –ø–æ–ª—É", callback_data="location_floor")
        builder.adjust(1)

        await message.answer("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=builder.as_markup())

    async def location_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        location_map = {
            "location_street": LocationType.STREET,
            "location_studio": LocationType.STUDIO,
            "location_floor": LocationType.FLOOR_ZONE
        }

        location = location_map[callback.data]
        await state.update_data(location=location)

        data = await state.get_data()
        gender = data['gender']

        builder = InlineKeyboardBuilder()

        if gender == GenderType.KIDS:
            age_groups = AgeGroup.KIDS.value
        else:
            age_groups = AgeGroup.WOMEN_MEN.value

        for age in age_groups:
            builder.button(text=age, callback_data=f"age_{age}")

        builder.adjust(2)

        await callback.message.answer("üéÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –º–æ–¥–µ–ª–∏:", reply_markup=builder.as_markup())
        await state.set_state(ProductCreationStates.waiting_for_age)

    async def age_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        age = callback.data.replace("age_", "")
        await state.update_data(age=age)

        data = await state.get_data()
        gender = data['gender']

        if gender == GenderType.KIDS:
            await state.set_state(ProductCreationStates.waiting_for_location_style)

            builder = InlineKeyboardBuilder()
            builder.button(text="üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω—è—è", callback_data="style_new_year")
            builder.button(text="‚òÄÔ∏è –õ–µ—Ç–æ", callback_data="style_summer")
            builder.button(text="üå≥ –ü—Ä–∏—Ä–æ–¥–∞", callback_data="style_nature")
            builder.button(text="üèûÔ∏è –ü–∞—Ä–∫ (–∑–∏–º–∞)", callback_data="style_park_winter")
            builder.button(text="üå≤ –ü–∞—Ä–∫ (–ª–µ—Ç–æ)", callback_data="style_park_summer")
            builder.button(text="üè¢ –û–±—ã—á–Ω—ã–π", callback_data="style_regular")
            builder.button(text="üöó –†—è–¥–æ–º —Å –º–∞—à–∏–Ω–æ–π", callback_data="style_car")
            builder.adjust(2)

            await callback.message.answer("üé® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=builder.as_markup())
        else:
            await state.set_state(ProductCreationStates.waiting_for_size)

            builder = InlineKeyboardBuilder()
            builder.button(text="42-46", callback_data="size_42_46")
            builder.button(text="50-54", callback_data="size_50_54")
            builder.button(text="58-64", callback_data="size_58_64")
            builder.button(text="64-68", callback_data="size_64_68")
            builder.adjust(2)

            await callback.message.answer("üìè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã:", reply_markup=builder.as_markup())

    async def size_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
        size_map = {
            "size_42_46": SizeType.SIZE_42_46,
            "size_50_54": SizeType.SIZE_50_54,
            "size_58_64": SizeType.SIZE_58_64,
            "size_64_68": SizeType.SIZE_64_68
        }

        size = size_map[callback.data]
        await state.update_data(size=size)
        await state.set_state(ProductCreationStates.waiting_for_location_style)

        builder = InlineKeyboardBuilder()
        builder.button(text="üéÑ –ù–æ–≤–æ–≥–æ–¥–Ω—è—è", callback_data="style_new_year")
        builder.button(text="‚òÄÔ∏è –õ–µ—Ç–æ", callback_data="style_summer")
        builder.button(text="üå≥ –ü—Ä–∏—Ä–æ–¥–∞", callback_data="style_nature")
        builder.button(text="üèûÔ∏è –ü–∞—Ä–∫ (–∑–∏–º–∞)", callback_data="style_park_winter")
        builder.button(text="üå≤ –ü–∞—Ä–∫ (–ª–µ—Ç–æ)", callback_data="style_park_summer")
        builder.button(text="üè¢ –û–±—ã—á–Ω—ã–π", callback_data="style_regular")
        builder.button(text="üöó –†—è–¥–æ–º —Å –º–∞—à–∏–Ω–æ–π", callback_data="style_car")
        builder.adjust(2)

        await callback.message.answer("üé® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=builder.as_markup())

    async def location_style_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
        style_map = {
            "style_new_year": LocationStyle.NEW_YEAR,
            "style_summer": LocationStyle.SUMMER,
            "style_nature": LocationStyle.NATURE,
            "style_park_winter": LocationStyle.PARK_WINTER,
            "style_park_summer": LocationStyle.PARK_SUMMER,
            "style_regular": LocationStyle.REGULAR,
            "style_car": LocationStyle.CAR
        }

        location_style = style_map[callback.data]
        await state.update_data(location_style=location_style)
        await state.set_state(ProductCreationStates.waiting_for_pose)

        builder = InlineKeyboardBuilder()
        builder.button(text="ü™ë –°–∏–¥—è", callback_data="pose_sitting")
        builder.button(text="üßç –°—Ç–æ—è", callback_data="pose_standing")
        builder.adjust(2)

        await callback.message.answer("üßò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–∞:", reply_markup=builder.as_markup())

    async def pose_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∑—ã"""
        pose_map = {
            "pose_sitting": PoseType.SITTING,
            "pose_standing": PoseType.STANDING
        }

        pose = pose_map[callback.data]
        await state.update_data(pose=pose)
        await state.set_state(ProductCreationStates.waiting_for_view)

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –°–∑–∞–¥–∏", callback_data="view_back")
        builder.button(text="üë§ –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å", callback_data="view_front")
        builder.adjust(2)

        await callback.message.answer("üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥:", reply_markup=builder.as_markup())

    async def view_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞"""
        view_map = {
            "view_back": ViewType.BACK,
            "view_front": ViewType.FRONT
        }

        view = view_map[callback.data]
        await state.update_data(view=view)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        data = await state.get_data()
        # ‚ùó –ó–¥–µ—Å—å –Ω—É–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ generate_prompt –∏ generate_summary, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ
        summary = await self.generate_summary(data)
        prompt = await self.generate_prompt(data)

        await state.update_data(prompt=prompt)

        user_id = callback.from_user.id
        self.db.add_generation(user_id, prompt)

        summary_text = f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{summary}"

        builder = InlineKeyboardBuilder()
        builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_generate")
        builder.button(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="confirm_edit")
        builder.adjust(1)

        await callback.message.answer(summary_text, reply_markup=builder.as_markup())
        await state.set_state(ProductCreationStates.waiting_for_confirmation)

    async def confirmation_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        user_id = callback.from_user.id
        current_balance = self.db.get_user_balance(user_id)

        if callback.data == "confirm_generate":
            if current_balance <= 0:
                await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
                await state.clear()
                return

            new_balance = current_balance - 1
            self.db.update_user_balance(user_id, new_balance)

            data = await state.get_data()
            prompt = data.get('prompt', '')
            temp_photo_path = data.get('temp_photo_path')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generating_msg = await callback.message.answer(
                f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞—Å—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-20 —Å–µ–∫—É–Ω–¥.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {new_balance}"
            )

            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Gemini API
                processed_image_bytes = call_nano_banana_api(temp_photo_path, prompt)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                generated_image = BufferedInputFile(processed_image_bytes, filename="generated_fashion.jpg")

                await callback.message.answer_photo(
                    generated_image,
                    caption="‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await generating_msg.delete()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await generating_msg.delete()

                error_msg = str(e)
                if "location is not supported" in error_msg.lower():
                    await callback.message.answer(
                        "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN\n"
                        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Cloud –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ä–µ–≥–∏–æ–Ω–µ\n"
                        "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
                        "–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω."
                    )
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å
                    self.db.update_user_balance(user_id, current_balance)
                else:
                    await callback.message.answer(
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                        f"`{error_msg}`\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                        f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω.",
                        parse_mode="Markdown"
                    )
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    self.db.update_user_balance(user_id, current_balance)

            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if temp_photo_path and os.path.exists(temp_photo_path):
                    os.unlink(temp_photo_path)

        else:
            # –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            await self.create_photo_handler(callback)

        await state.clear()

    # --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

    async def add_balance_handler(self, message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        if message.from_user.id != ADMIN_ID:
            return

        try:
            _, user_id_str, amount_str = message.text.split()
            user_id = int(user_id_str)
            amount = int(amount_str)

            current_balance = self.db.get_user_balance(user_id)
            new_balance = current_balance + amount
            self.db.update_user_balance(user_id, new_balance)

            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å: +{amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

        except ValueError:
             await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_balance [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–∫–æ–ª-–≤–æ]`")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def stats_handler(self, message: Message):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        if message.from_user.id != ADMIN_ID:
            return

        total_users, total_generations, total_balance = self.db.get_all_users_stats()

        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**\n"
            "-----------------------------\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
            f"üì∏ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: `{total_generations}`\n"
            f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ): `{total_balance}`"
        )
        await message.answer(stats_text, parse_mode="Markdown")

    # --- –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏ —Å–≤–æ–¥–∫–∏ (–Ω—É–∂–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏) ---
    async def generate_summary(self, data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ FSMContext."""
        summary = ""
        for key, value in data.items():
             if key not in ['photo_file_id', 'temp_photo_path', 'prompt'] and value:
                 # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - Enum, –±–µ—Ä–µ–º –µ–≥–æ .value –∏–ª–∏ .name
                 display_value = value.value if hasattr(value, 'value') and isinstance(value.value, str) else value.name if hasattr(value, 'name') else str(value)
                 summary += f"‚Ä¢ **{key.capitalize()}**: {display_value}\n"
        return summary or "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)."

    async def generate_prompt(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini."""
        gender = data.get('gender', GenderType.DISPLAY).value
        location = data.get('location', 'Studio').value if hasattr(data.get('location'), 'value') else 'Studio'
        height = data.get('height', '170')
        age = data.get('age', '25')
        size = data.get('size', '44')
        style = data.get('location_style', LocationStyle.REGULAR).value if hasattr(data.get('location_style'), 'value') else 'regular style'
        pose = data.get('pose', PoseType.STANDING).value if hasattr(data.get('pose'), 'value') else 'standing'
        view = data.get('view', ViewType.FRONT).value if hasattr(data.get('view'), 'value') else 'front view'

        if data.get('gender') == GenderType.DISPLAY:
             return "Create a product display photo on a clean, light background with soft shadows. Focus on the clothing item, making it look professional and appealing for e-commerce."

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è inpainting/remixing
        prompt = (
            f"Replace the clothing item on the model in the provided image with the new item. "
            f"The final image should show a {gender} model, {age} years old, wearing the new garment. "
            f"Model characteristics: height {height} cm, clothes size {size}. "
            f"Setting: **{location}** in a **{style}** atmosphere. "
            f"Model Pose: **{pose}** with a **{view}**. "
            "Ensure the garment fits naturally and realistically, maintaining high photo quality, realistic lighting, and professional photography style. Do not change the model's face or hair, only the clothing and background/setting according to the prompt."
        )
        return prompt

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    bot_instance = FashionBot(token=BOT_TOKEN)
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è types –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    await bot_instance.dp.start_polling(bot_instance.bot)

if __name__ == "__main__":
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –µ—Å—Ç—å –∑–∞–≥–ª—É—à–∫–∞ ImageDraw
        if GEMINI_DEMO_MODE:
             try:
                 from PIL import ImageDraw
             except ImportError:
                 logger.error("‚ùå –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pillow: pip install Pillow")
                 sys.exit(1)

        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")