
import logging
import os
from io import BytesIO
from PIL import Image

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from dotenv import load_dotenv
from google import genai
from google.genai.errors import APIError
from google.genai.types import GenerateImagesResponse, Image as GenAIImage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ú–æ–¥–µ–ª–∏
GEMINI_ANALYSIS_MODEL = "gemini-2.5-flash"  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ (–≤–∞—à–∞ "flash image")
IMAGE_GENERATION_MODEL = "imagen-3.0-generate-002" # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PHOTO, DESCRIPTION = range(2)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini/Imagen –∫–ª–∏–µ–Ω—Ç–∞
try:
    if not GEMINI_API_KEY:
        raise ValueError("–ö–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    client = genai.Client(api_key=GEMINI_API_KEY)
except Exception as e:
    logger.error(f"üö´ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Google AI: {e}")
    client = None

# --- –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å Gemini 2.5 Flash ---

async def generate_enhanced_prompt(image_data: BytesIO, user_description: str) -> str:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gemini 2.5 Flash –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
    –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ Imagen.
    """
    image_data.seek(0)
    image = Image.open(image_data)

    system_instruction = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å "
        "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∏–ª—å, "
        "–∫–æ–º–ø–æ–∑–∏—Ü–∏—é, –æ—Å–≤–µ—â–µ–Ω–∏–µ) —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–µ—Ä–Ω–∏ –µ–¥–∏–Ω—ã–π, "
        "–≤—ã—Å–æ–∫–æ–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Imagen."
    )

    prompt = (
        f"–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –∫–∞–∫ —Å–∏–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π "
        f"–±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: '{user_description}'."
    )

    response = client.models.generate_content(
        model=GEMINI_ANALYSIS_MODEL,
        contents=[image, prompt],
        config={"system_instruction": system_instruction}
    )

    return response.text.strip()

# --- –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Imagen ---

async def generate_image_with_imagen(final_prompt: str, input_image_bytes: bytes) -> bytes:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Imagen –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ GenAIImage –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
    input_image = GenAIImage.from_bytes(data=input_image_bytes, mime_type='image/jpeg')

    response: GenerateImagesResponse = client.models.generate_images(
        model=IMAGE_GENERATION_MODEL,
        prompt=final_prompt,
        config={
            "number_of_images": 1,
            "output_mime_type": "image/jpeg",
            "aspect_ratio": "1:1",
            "image": input_image # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
        }
    )

    if not response.generated_images:
        raise Exception("Imagen –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    return response.generated_images[0].image.image_bytes

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ."""
    if not client:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç Google AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é **Gemini 2.5 Flash** (–∞–Ω–∞–ª–∏–∑) –∏ **Imagen** (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è).\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ** (—Ä–µ—Ñ–µ—Ä–µ–Ω—Å)."
    )
    context.user_data.clear()
    return PHOTO

async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –ø—Ä–æ—Å–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
        return PHOTO

    photo_file = update.message.photo[-1]
    context.user_data['photo_file_id'] = photo_file.file_id

    await update.message.reply_text(
        "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å **–Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** (–ø—Ä–æ–º–ø—Ç) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏."
    )
    return DESCRIPTION

async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥: –ê–Ω–∞–ª–∏–∑ -> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è -> –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    user_description = update.message.text
    await update.message.reply_text("‚è≥ –ü–æ–ª—É—á–∞—é —Ñ–æ—Ç–æ. **Gemini 2.5 Flash** –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç...")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
    photo_file_id = context.user_data['photo_file_id']
    new_file = await context.bot.get_file(photo_file_id)

    photo_bytes_io = BytesIO()
    await new_file.download_to_memory(photo_bytes_io)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–π—Ç—ã –¥–ª—è Imagen
    original_image_bytes = photo_bytes_io.getvalue()

    try:
        # 2. –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini
        enhanced_prompt = await generate_enhanced_prompt(photo_bytes_io, user_description)
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {enhanced_prompt}")
        await update.message.reply_text(f"üìù –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å **Imagen**...")

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Imagen
        generated_image_bytes = await generate_image_with_imagen(enhanced_prompt, original_image_bytes)

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
        await update.message.reply_photo(
            photo=generated_image_bytes,
            caption=(
                f"‚ú® **–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n"
                f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: *{user_description}*\n"
                f"‚öôÔ∏è –ú–æ–¥–µ–ª—å: `{IMAGE_GENERATION_MODEL}`"
            ),
            parse_mode='Markdown'
        )

    except APIError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API Google AI: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ª–∏–º–∏—Ç—ã.")
        logger.error(f"API Error: {e}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"General Error: {e}")
    finally:
        context.user_data.clear()
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ –∫–æ–º–∞–Ω–¥–µ /cancel."""
    context.user_data.clear()
    await update.message.reply_text('‚õîÔ∏è –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞: /start')
    return ConversationHandler.END


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
        logger.error("üö´ –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–ª–∏ –∫–ª—é—á Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO & ~filters.COMMAND, receive_photo)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_description)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Gemini –∏ Imagen.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()