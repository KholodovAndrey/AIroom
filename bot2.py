
import logging
import os
from io import BytesIO
from PIL import Image

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

from google import genai
from google.genai.errors import APIError
from google.genai.types import GenerateImagesResponse, Image as GenAIImage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ú–æ–¥–µ–ª–∏
GEMINI_ANALYSIS_MODEL = "gemini-2.5-flash"
IMAGE_GENERATION_MODEL = "imagen-3.0-generate-002"

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google AI –∫–ª–∏–µ–Ω—Ç–∞
try:
    if not GEMINI_API_KEY:
        raise ValueError("–ö–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    client = genai.Client(api_key=GEMINI_API_KEY)
except Exception as e:
    logging.error(f"üö´ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Google AI: {e}")
    client = None

# --- FSM States (–°–æ—Å—Ç–æ—è–Ω–∏—è) ---
class GenerationStates(StatesGroup):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    waiting_for_photo = State()
    waiting_for_description = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Router –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Google AI (–§—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏) ---

async def generate_enhanced_prompt(image_data: BytesIO, user_description: str) -> str:
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gemini 2.5 Flash –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º PIL Image
    image_data.seek(0)
    image = Image.open(image_data)

    system_instruction = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–º–ø—Ç-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥—É. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ "
        "–æ–±—ä–µ–¥–∏–Ω–∏ –µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–í–µ—Ä–Ω–∏ –µ–¥–∏–Ω—ã–π, –≤—ã—Å–æ–∫–æ–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Imagen."
    )

    prompt = (
        f"–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –∫–∞–∫ —Å–∏–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ–Ω—Å. –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π "
        f"–±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: '{user_description}'."
    )

    response = client.models.generate_content(
        model=GEMINI_ANALYSIS_MODEL,
        contents=[image, prompt],
        config={"system_instruction": system_instruction}
    )

    return response.text.strip()

async def generate_image_with_imagen(final_prompt: str, input_image_bytes: bytes) -> bytes:
    """–í—ã–∑—ã–≤–∞–µ—Ç Imagen –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""

    input_image = GenAIImage.from_bytes(data=input_image_bytes, mime_type='image/jpeg')

    response: GenerateImagesResponse = client.models.generate_images(
        model=IMAGE_GENERATION_MODEL,
        prompt=final_prompt,
        config={
            "number_of_images": 1,
            "output_mime_type": "image/jpeg",
            "aspect_ratio": "1:1",
            "image": input_image # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∫–∞–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        }
    )

    if not response.generated_images:
        raise Exception("Imagen –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

    return response.generated_images[0].image.image_bytes


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram (aiogram) ---

@router.message(Command("start"))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not client:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç Google AI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á.")
        await state.clear()
        return

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é **Gemini 2.5 Flash** (–∞–Ω–∞–ª–∏–∑) –∏ **Imagen** (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è).\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ** (—Ä–µ—Ñ–µ—Ä–µ–Ω—Å)."
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    await state.set_state(GenerationStates.waiting_for_photo)


@router.message(GenerationStates.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext, bot: Bot) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –ø—Ä–æ—Å–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
    file_info = await bot.get_file(message.photo[-1].file_id)
    photo_bytes_io = BytesIO()
    await bot.download_file(file_info.file_path, photo_bytes_io)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–π—Ç—ã –≤ FSMContext
    await state.update_data(original_image_bytes=photo_bytes_io.getvalue())

    await message.answer(
        "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å **–Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** (–ø—Ä–æ–º–ø—Ç) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞—Ü–∏–∏."
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    await state.set_state(GenerationStates.waiting_for_description)

@router.message(GenerationStates.waiting_for_photo, F.text)
async def process_photo_invalid(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ."""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")


@router.message(GenerationStates.waiting_for_description, F.text)
async def process_description(message: Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""

    user_description = message.text
    data = await state.get_data()
    original_image_bytes = data.get("original_image_bytes")

    if not original_image_bytes:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞: /start")
        await state.clear()
        return

    await message.answer("‚è≥ –û—Ç–ª–∏—á–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. **Gemini 2.5 Flash** –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ...")

    try:
        # 1. –ê–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ (Gemini 2.5 Flash)
        photo_bytes_io = BytesIO(original_image_bytes)
        enhanced_prompt = await generate_enhanced_prompt(photo_bytes_io, user_description)

        await message.answer("üìù –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å **Imagen**...")

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Imagen)
        generated_image_bytes = await generate_image_with_imagen(enhanced_prompt, original_image_bytes)

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
        await message.answer_photo(
            photo=generated_image_bytes,
            caption=(
                f"‚ú® **–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n"
                f"üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: *{user_description}*\n"
                f"‚öôÔ∏è –ú–æ–¥–µ–ª—å: `{IMAGE_GENERATION_MODEL}`"
            ),
            parse_mode='Markdown'
        )

    except APIError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ API Google AI: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ –ª–∏–º–∏—Ç—ã.")
        logging.error(f"API Error: {e}")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"General Error: {e}")
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        await state.clear()

@router.message(Command("cancel"))
async def command_cancel_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel."""
    await state.clear()
    await message.answer("‚õîÔ∏è –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω. –ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞: /start")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

async def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ aiogram."""
    if not TELEGRAM_BOT_TOKEN:
        logging.error("üö´ –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ aiogram! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Gemini –∏ Imagen.")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: dp.start_polling() –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main
    asyncio.run(main())