"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
"""
import os
import asyncio
import tempfile
from typing import Dict, Any
from io import BytesIO

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
from PIL import Image

from config import SUPPORT_USERNAME, GEMINI_DEMO_MODE, logger
from database import Database
from models import (
    GenderType,
    LocationType,
    SizeType,
    LocationStyle,
    PoseType,
    ViewType,
    ProductCreationStates
)
from keyboards import (
    get_location_keyboard,
    get_age_keyboard,
    get_size_keyboard,
    get_location_style_keyboard,
    get_pose_keyboard,
    get_view_keyboard,
    get_confirmation_keyboard,
    get_back_keyboard,
    get_white_bg_view_keyboard,
    get_after_generation_keyboard,
    get_regenerate_keyboard,
    get_length_keyboard
)
from gemini_api import call_gemini_api
from utils import show_progress_bar

router = Router()
db = Database()


async def generate_prompt(data: Dict[str, Any]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini API –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """
    gender = data.get('gender', GenderType.DISPLAY)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
    size = data.get('size')
    body_type_description = ""
    if size:
        size_value = size.value if hasattr(size, 'value') else str(size)
        if "42-46" in size_value:
            body_type_description = "–°—Ç—Ä–æ–π–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, —Ö—É–¥–æ—â–∞–≤–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ."
        elif "50-54" in size_value:
            body_type_description = "–ü–æ–ª–Ω–∞—è, –Ω–æ –Ω–µ —Å–∏–ª—å–Ω–æ –ø–æ–ª–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, –Ω–µ —Ö—É–¥–æ–µ –∏ –Ω–µ –æ—á–µ–Ω—å —Ç–æ–ª—Å—Ç–æ–µ."
        elif "58-64" in size_value:
            body_type_description = "–ü–æ–ª–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, –∫—Ä—É–ø–Ω–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, –∫—Ä—É–ø–Ω—ã–µ –Ω–æ–≥–∏ –∏ —Ä—É–∫–∏."
        elif "64-68" in size_value:
            body_type_description = "–û—á–µ–Ω—å –ø–æ–ª–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, –≥–∏–≥–∞–Ω—Ç—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã, –æ—á–µ–Ω—å —Ç–æ–ª—Å—Ç–æ–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ."

    if gender == GenderType.DISPLAY:
        base_prompt = (
            "Create a professional, high-quality, product-focused photo suitable for "
            "an online store's storefront/display (–≤–∏—Ç—Ä–∏–Ω–Ω–æ–µ —Ñ–æ—Ç–æ). "
            "The clothing must be perfectly ironed, without any wrinkles or creases. "
            "Seamlessly replace the background of the input product image with a "
            "stylized, minimalist, and aesthetically pleasing background, while keeping the product clear and well-lit. "
            "Ensure the final image is visually appealing and studio-quality. "
            "Image aspect ratio: 4:3. "
            "If the clothing in the photo is wrinkled or has folds, they should not be visible in the final image. "
            "Avoid excessive retouching, keep natural appearance. "
            "European appearance for any human elements."
        )
        return base_prompt
    
    if gender == GenderType.WHITE_BG:
        view = data.get('white_bg_view', 'front')
        view_text = "back view" if view == "back" else "front view"
        
        white_bg_prompt = (
            f"Create a professional, high-quality product photograph on a pure white background. "
            f"Show the clothing item from {view_text} as a 3D product visualization. "
            f"The clothing must be perfectly ironed, without any wrinkles or creases. "
            f"The product should look like a 3D rendered object - clean, crisp, and professional. "
            f"The product should be the main focus, well-lit with soft shadows, "
            f"presented in a clean, commercial style suitable for an online store. "
            f"The background must be completely white (#FFFFFF). "
            f"Ensure the product looks professional and appealing, as if it's a 3D product visualization. "
            f"Image aspect ratio: 4:3. "
            f"If the clothing in the original photo is wrinkled or has folds, they must be completely removed in the final image. "
            f"Avoid excessive retouching, maintain natural fabric texture. "
            f"European appearance for any human elements."
        )
        return white_bg_prompt

    gender_text = gender.value
    height = data.get('height', '170')
    length = data.get('length', '70') 
    location = data.get('location', LocationType.STUDIO).value
    age = data.get('age', '25-35')
    size = data.get('size', SizeType.SIZE_42_46).value if gender != GenderType.KIDS else ""
    location_style = data.get('location_style', LocationStyle.REGULAR).value
    pose = data.get('pose', PoseType.STANDING).value
    view = data.get('view', ViewType.FRONT).value

    model_details = f"a professional, natural-looking model with European appearance, {gender_text} clothing, height {height} cm, age range {age}"
    if size:
        model_details += f", wearing size {size}"
    if body_type_description:
        model_details += f", {body_type_description}"

    scene_details = f"in a {location} setting, with a {location_style} atmosphere. Pose: {pose}, View: {view}."

    prompt = (
        f"Generate a hyper-realistic, high-definition (4k), professional fashion photograph with 4:3 aspect ratio. "
        f"The image must feature **{model_details}**. "
        f"The clothing on the model must be perfectly ironed, smooth, without any wrinkles, creases or folds. "
        f"If the clothing in the original photo is wrinkled or has folds, they must be completely removed in the final image. "
        f"The model should be perfectly integrated with the clothing from the input image. "
        f"Scene: **{scene_details}**. "
        f"The model should be well-lit, and the final image should look like it was taken by a top fashion photographer. "
        f"Focus on natural-looking hands and realistic facial features (if visible). "
        f"Avoid excessive retouching - keep natural skin texture and appearance. "
        f"European facial features and appearance. "
        f"Image aspect ratio: 4:3. "
        f"Exclude any watermarks or text overlays."
    )

    return prompt


async def generate_summary(data: Dict[str, Any]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    summary_parts = []

    gender = data.get('gender', GenderType.DISPLAY)
    summary_parts.append(f"üì¶ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è**: {gender.value.capitalize()}")

    if gender == GenderType.WHITE_BG:
        view = data.get('white_bg_view', 'front')
        view_text = "–°–∑–∞–¥–∏" if view == "back" else "–°–ø–µ—Ä–µ–¥–∏"
        summary_parts.append(f"üëÄ **–†–∞–∫—É—Ä—Å**: {view_text}")
    elif gender != GenderType.DISPLAY:
        summary_parts.append(f"üìè **–†–æ—Å—Ç –º–æ–¥–µ–ª–∏**: {data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º")
        summary_parts.append(f"üìê **–î–ª–∏–Ω–∞ –∏–∑–¥–µ–ª–∏—è**: {data.get('length', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Å–º")
        summary_parts.append(f"üìç **–õ–æ–∫–∞—Ü–∏—è**: {data.get('location', LocationType.STUDIO).value}")
        summary_parts.append(f"üéÇ **–í–æ–∑—Ä–∞—Å—Ç –º–æ–¥–µ–ª–∏**: {data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}")

        if gender != GenderType.KIDS:
            summary_parts.append(f"üìê **–†–∞–∑–º–µ—Ä**: {data.get('size', SizeType.SIZE_42_46).value}")

        summary_parts.append(f"üé® **–°—Ç–∏–ª—å –ª–æ–∫–∞—Ü–∏–∏**: {data.get('location_style', LocationStyle.REGULAR).value}")
        summary_parts.append(f"üßò **–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–∞**: {data.get('pose', PoseType.STANDING).value}")
        summary_parts.append(f"üëÄ **–í–∏–¥**: {data.get('view', ViewType.FRONT).value}")

    return "\n".join(summary_parts)


@router.callback_query(F.data.startswith("gender_"))
async def gender_select_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    user_id = callback.from_user.id
    user_generations = db.get_user_generations_count(user_id)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é
    if user_generations == 0:
        current_balance = db.get_user_balance(user_id)
        if current_balance == 0:  # –î–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å 0
            db.update_user_balance(user_id, 1)
            await callback.message.answer(
                "üéâ **–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è!**\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ. "
                "–î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞."
            )

    gender_map = {
        "gender_women": GenderType.WOMEN,
        "gender_men": GenderType.MEN,
        "gender_kids": GenderType.KIDS,
        "gender_display": GenderType.DISPLAY,
        "gender_white_bg": GenderType.WHITE_BG
    }

    gender = gender_map[callback.data]
    await state.update_data(gender=gender)

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if gender not in [GenderType.DISPLAY, GenderType.WHITE_BG]:
        import os
        if os.path.exists("photo/example1.jpg") and os.path.exists("photo/example2.jpg"):
            try:
                media_group = MediaGroupBuilder()
                photo1 = FSInputFile("photo/example1.jpg")
                photo2 = FSInputFile("photo/example2.jpg")
                media_group.add_photo(media=photo1)
                media_group.add_photo(media=photo2)
                await callback.message.answer_media_group(media=media_group.build())
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ: {e}")
        else:
            logger.info("–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

    if gender == GenderType.DISPLAY:
        instruction_text = (
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ç—Ä–∏–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ.\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ "
            "–±–µ–∑ –ª–∏—à–Ω–∏—Ö –±–ª–∏–∫–æ–≤ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–µ–π.\n\n"
            f"–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {SUPPORT_USERNAME}"
        )
    elif gender == GenderType.WHITE_BG:
        instruction_text = (
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ.\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ–π "
            "–±–µ–∑ –ª–∏—à–Ω–∏—Ö –±–ª–∏–∫–æ–≤ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–µ–π.\n\n"
            f"–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {SUPPORT_USERNAME}"
        )
    else:
        instruction_text = (
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–∞ "
            "–±–µ–∑ –ª–∏—à–Ω–∏—Ö –±–ª–∏–∫–æ–≤ –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–µ–π.\n\n"
            f"–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É {SUPPORT_USERNAME}"
        )

    await callback.message.answer(instruction_text)
    await state.set_state(ProductCreationStates.waiting_for_photo)
    await callback.answer()


@router.message(StateFilter(ProductCreationStates.waiting_for_photo))
async def photo_handler(message: Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    if not message.photo:
        await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")
        return

    photo_file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=photo_file_id)

    temp_path = None
    try:
        file = await bot.get_file(photo_file_id)
        file_path = file.file_path

        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
        temp_path = temp_file.name
        temp_file.close()

        await bot.download_file(file_path, temp_path)
        await state.update_data(temp_photo_path=temp_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        if temp_path and os.path.exists(temp_path):
            os.unlink(temp_path)
        return

    data = await state.get_data()
    gender = data['gender']

    if gender == GenderType.DISPLAY:
        prompt = await generate_prompt(data)
        await state.update_data(prompt=prompt)

        user_id = message.from_user.id
        db.add_generation(user_id, prompt)

        summary = await generate_summary(data)
        summary_text = f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{summary}"

        await message.answer(summary_text, reply_markup=get_confirmation_keyboard())
        await state.set_state(ProductCreationStates.waiting_for_confirmation)
    elif gender == GenderType.WHITE_BG:
        # –î–ª—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞ - —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä —Ä–∞–∫—É—Ä—Å–∞
        await state.set_state(ProductCreationStates.waiting_for_white_bg_view)
        await message.answer(
            "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∫—É—Ä—Å –¥–ª—è —Ñ–æ—Ç–æ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ:",
            reply_markup=get_white_bg_view_keyboard()
        )
    else:
        await state.set_state(ProductCreationStates.waiting_for_height)
        await message.answer("üìè –ù–∞–ø–∏—à–∏—Ç–µ —Ä–æ—Å—Ç –º–æ–¥–µ–ª–∏ (–≤ —Å–º):")


@router.message(StateFilter(ProductCreationStates.waiting_for_height))
async def height_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
    height = message.text
    if not height.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤ —Å–º:")
        return

    await state.update_data(height=height)
    await state.set_state(ProductCreationStates.waiting_for_length)
    
    await message.answer(
        "üìè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∏–∑–¥–µ–ª–∏—è –≤ —Å–º (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=get_length_keyboard()
    )


@router.message(StateFilter(ProductCreationStates.waiting_for_length))
async def length_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–ª–∏–Ω—ã –∏–∑–¥–µ–ª–∏—è"""
    length = message.text
    if not length.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤ —Å–º:")
        return

    await state.update_data(length=length)
    await state.set_state(ProductCreationStates.waiting_for_location)

    await message.answer("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=get_location_keyboard())

@router.callback_query(F.data == "length_skip")
async def length_skip_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏–Ω—ã"""
    await state.update_data(length="70")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await state.set_state(ProductCreationStates.waiting_for_location)

    await callback.message.answer("üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=get_location_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("location_"))
async def location_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    location_map = {
        "location_street": LocationType.STREET,
        "location_studio": LocationType.STUDIO, 
        "location_floor": LocationType.FLOOR_ZONE
    }

    location = location_map[callback.data]
    await state.update_data(location=location)

    data = await state.get_data()
    gender = data['gender']

    await callback.message.answer(
        "üéÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –º–æ–¥–µ–ª–∏:",
        reply_markup=get_age_keyboard(gender)
    )
    await state.set_state(ProductCreationStates.waiting_for_age)
    await callback.answer()


@router.callback_query(F.data.startswith("age_"))
async def age_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    age = callback.data.replace("age_", "")
    await state.update_data(age=age)

    data = await state.get_data()
    gender = data['gender']
    location = data.get('location')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é

    if gender == GenderType.KIDS:
        await state.set_state(ProductCreationStates.waiting_for_location_style)
        await callback.message.answer(
            "üé® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_location_style_keyboard(location)  # –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
        )
    else:
        await state.set_state(ProductCreationStates.waiting_for_size)
        await callback.message.answer(
            "üìè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã:",
            reply_markup=get_size_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("size_"))
async def size_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    size_map = {
        "size_42_46": SizeType.SIZE_42_46,
        "size_50_54": SizeType.SIZE_50_54,
        "size_58_64": SizeType.SIZE_58_64,
        "size_64_68": SizeType.SIZE_64_68
    }

    size = size_map[callback.data]
    await state.update_data(size=size)
    await state.set_state(ProductCreationStates.waiting_for_location_style)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    location = data.get('location')

    await callback.message.answer(
        "üé® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ª–æ–∫–∞—Ü–∏–∏:",
        reply_markup=get_location_style_keyboard(location)  # –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    )
    await callback.answer()


@router.callback_query(F.data.startswith("style_"))
async def location_style_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
    style_map = {
        "style_new_year": LocationStyle.NEW_YEAR,
        "style_summer": LocationStyle.SUMMER,
        "style_nature": LocationStyle.NATURE,
        "style_park_winter": LocationStyle.PARK_WINTER,
        "style_park_summer": LocationStyle.PARK_SUMMER,
        "style_regular": LocationStyle.REGULAR,
        "style_car": LocationStyle.CAR
    }

    location_style = style_map[callback.data]
    await state.update_data(location_style=location_style)
    await state.set_state(ProductCreationStates.waiting_for_pose)

    await callback.message.answer(
        "üßò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–∞:",
        reply_markup=get_pose_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("pose_"))
async def pose_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–∑—ã"""
    pose_map = {
        "pose_sitting": PoseType.SITTING,
        "pose_standing": PoseType.STANDING
    }

    pose = pose_map[callback.data]
    await state.update_data(pose=pose)
    await state.set_state(ProductCreationStates.waiting_for_view)

    await callback.message.answer("üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥:", reply_markup=get_view_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("view_"))
async def view_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞"""
    view_map = {
        "view_back": ViewType.BACK,
        "view_front": ViewType.FRONT
    }

    view = view_map[callback.data]
    await state.update_data(view=view)

    data = await state.get_data()
    summary = await generate_summary(data)
    prompt = await generate_prompt(data)

    await state.update_data(prompt=prompt)

    user_id = callback.from_user.id
    db.add_generation(user_id, prompt)

    summary_text = f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{summary}"

    await callback.message.answer(summary_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(ProductCreationStates.waiting_for_confirmation)
    await callback.answer()


@router.callback_query(F.data.startswith("white_bg_view_"))
async def white_bg_view_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∫—É—Ä—Å–∞ –¥–ª—è –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞"""
    view_map = {
        "white_bg_view_back": "back",
        "white_bg_view_front": "front"
    }
    
    view = view_map[callback.data]
    await state.update_data(white_bg_view=view)
    
    data = await state.get_data()
    prompt = await generate_prompt(data)
    await state.update_data(prompt=prompt)
    
    user_id = callback.from_user.id
    db.add_generation(user_id, prompt)
    
    summary = await generate_summary(data)
    summary_text = f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n{summary}"
    
    await callback.message.answer(summary_text, reply_markup=get_confirmation_keyboard())
    await state.set_state(ProductCreationStates.waiting_for_confirmation)
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_"))
async def confirmation_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    from handlers.user_handlers import create_photo_handler
    
    user_id = callback.from_user.id
    current_balance = db.get_user_balance(user_id)

    if callback.data == "confirm_generate":
        if current_balance <= 0 and not GEMINI_DEMO_MODE:
            await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
            await state.clear()
            await callback.answer()
            return

        if not GEMINI_DEMO_MODE:
            new_balance = current_balance - 1
            db.update_user_balance(user_id, new_balance)
        else:
            new_balance = current_balance

        data = await state.get_data()
        prompt = data.get('prompt', '')
        temp_photo_path = data.get('temp_photo_path')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if 'original_prompt' not in data:
            await state.update_data(original_prompt=prompt)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not temp_photo_path:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            await callback.answer()
            return

        generating_msg = await callback.message.answer(
            f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...\n\n"
            f"[‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±] 0%\n\n"
            f"‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            progress_task = asyncio.create_task(show_progress_bar(generating_msg, duration=15))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini API
            processed_image_bytes = call_gemini_api(temp_photo_path, prompt)
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            progress_task.cancel()
            try:
                await progress_task
            except asyncio.CancelledError:
                pass

            # –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PIL –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram
            image_stream = BytesIO(processed_image_bytes)
            img = Image.open(image_stream)

            output_stream = BytesIO()
            img.save(output_stream, format='JPEG', quality=90)
            final_image_bytes = output_stream.getvalue()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            generated_image = BufferedInputFile(final_image_bytes, filename="generated_fashion.jpg")

            await callback.message.answer_photo(
                generated_image,
                caption="‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                reply_markup=get_after_generation_keyboard()
            )

            await generating_msg.delete()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await generating_msg.delete()

            error_msg = str(e)
            if "location is not supported" in error_msg.lower() and not GEMINI_DEMO_MODE:
                await callback.message.answer(
                    "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.\n\n"
                    "–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω."
                )
                db.update_user_balance(user_id, current_balance)
            else:
                await callback.message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                    f"{error_msg[:200]}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode=None
                )
                if not GEMINI_DEMO_MODE:
                    db.update_user_balance(user_id, current_balance)

        finally:
            # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ–∞–π–ª –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –∏–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
            pass

    elif callback.data == "confirm_edit":
        await state.clear()
        await create_photo_handler(callback)
    
    await callback.answer()


@router.callback_query(F.data == "after_gen_edit")
async def after_generation_edit_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.message.answer(
        "‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –Ω–∞ –≥–æ–ª—É–±–æ–π\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ —è—Ä–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –º–æ–¥–µ–ª—å –±–æ–ª–µ–µ —É–ª—ã–±—á–∏–≤–æ–π\n\n"
        "–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É."
    )
    await state.set_state(ProductCreationStates.waiting_for_custom_prompt)
    await callback.answer()


@router.callback_query(F.data == "after_gen_finish")
async def after_generation_finish_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    from handlers.user_handlers import show_main_menu
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    data = await state.get_data()
    temp_photo_path = data.get('temp_photo_path')
    
    if temp_photo_path and os.path.exists(temp_photo_path):
        os.unlink(temp_photo_path)
    
    await state.clear()
    await callback.message.delete()
    await show_main_menu(callback.message)
    await callback.answer()


@router.message(StateFilter(ProductCreationStates.waiting_for_custom_prompt))
async def custom_prompt_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    user_id = message.from_user.id
    current_balance = db.get_user_balance(user_id)
    
    if current_balance <= 0 and not GEMINI_DEMO_MODE:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    original_prompt = data.get('original_prompt', data.get('prompt', ''))
    user_additions = message.text
    temp_photo_path = data.get('temp_photo_path')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not temp_photo_path or not os.path.exists(temp_photo_path):
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_back_keyboard()
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if 'original_prompt' not in data:
        await state.update_data(original_prompt=original_prompt)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç—ã
    combined_prompt = f"{original_prompt}\n\nAdditional user requirements: {user_additions}"
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if not GEMINI_DEMO_MODE:
        new_balance = current_balance - 1
        db.update_user_balance(user_id, new_balance)
    else:
        new_balance = current_balance
    
    db.add_generation(user_id, combined_prompt)
    
    generating_msg = await message.answer(
        f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏...\n\n"
        f"[‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±] 0%\n\n"
        f"‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        progress_task = asyncio.create_task(show_progress_bar(generating_msg, duration=12))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        processed_image_bytes = call_gemini_api(temp_photo_path, combined_prompt)
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_task.cancel()
        try:
            await progress_task
        except asyncio.CancelledError:
            pass
        
        # –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PIL
        image_stream = BytesIO(processed_image_bytes)
        img = Image.open(image_stream)
        
        output_stream = BytesIO()
        img.save(output_stream, format='JPEG', quality=90)
        final_image_bytes = output_stream.getvalue()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞
        generated_image = BufferedInputFile(final_image_bytes, filename="generated_fashion.jpg")
        
        await message.answer_photo(
            generated_image,
            caption="‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=get_regenerate_keyboard()
        )
        
        await generating_msg.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await generating_msg.delete()
        
        error_msg = str(e)
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
            f"{error_msg[:200]}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            parse_mode=None
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å
        if not GEMINI_DEMO_MODE:
            db.update_user_balance(user_id, current_balance)
    
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ–∞–π–ª
        await state.clear()
        if temp_photo_path and os.path.exists(temp_photo_path):
            os.unlink(temp_photo_path)