"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from config import ADMIN_ID, logger
from database import Database

router = Router()
db = Database()


@router.message(Command("add_balance"))
async def add_balance_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_balance (–¢–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer(
                "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/add_balance [user_id] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≥–µ–Ω–µ—Ä–∞—Ü–∏–π]`",
                parse_mode="Markdown"
            )
            return

        target_user_id = int(parts[1])
        amount = int(parts[2])

        if amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        current_balance = db.get_user_balance(target_user_id)
        new_balance = current_balance + amount
        db.update_user_balance(target_user_id, new_balance)

        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{target_user_id}` –æ–±–Ω–æ–≤–ª–µ–Ω.\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.",
            parse_mode="Markdown"
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_balance_handler: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")


@router.message(Command("stats"))
async def stats_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (–¢–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    total_users, total_generations, total_balance = db.get_all_users_stats()

    stats_text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üé® –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total_generations}\n"
        f"üí∞ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {total_balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    )
    await message.answer(stats_text, parse_mode="Markdown")

