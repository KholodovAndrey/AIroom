"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import SUPPORT_USERNAME, GEMINI_DEMO_MODE
from database import Database
from keyboards import (
    get_accept_terms_keyboard,
    get_main_menu_keyboard,
    get_back_keyboard,
    get_gender_keyboard,
    get_topup_balance_keyboard,
    get_insufficient_balance_keyboard
)

router = Router()
db = Database()


@router.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fashion AI Generator!\n\n"
        "–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–π –æ–¥–µ–∂–¥—ã –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏ –Ω–∞ –º–æ–¥–µ–ª—è—Ö.\n\n"
        "üìã –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å:\n"
        "1. –£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "2. –°–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"
    )

    await message.answer(welcome_text, reply_markup=get_accept_terms_keyboard())


@router.callback_query(F.data == "accept_terms")
async def accept_terms_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π"""
    await callback.message.delete()
    await show_main_menu(callback.message)
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    await show_main_menu(callback.message)
    await callback.answer()


@router.callback_query(F.data == "support")
async def support_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    support_text = f"üìû –î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ: {SUPPORT_USERNAME}"
    await callback.message.answer(support_text, reply_markup=get_back_keyboard())
    await callback.answer()


@router.callback_query(F.data == "topup_balance")
async def topup_balance_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    user_id = callback.from_user.id
    current_balance = db.get_user_balance(user_id)

    balance_text = (
        f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n"
        f"{SUPPORT_USERNAME}\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: `{user_id}`"
    )

    await callback.message.answer(
        balance_text,
        reply_markup=get_topup_balance_keyboard(user_id),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "create_photo")
async def create_photo_handler(callback: CallbackQuery, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if state:
        import os
        data = await state.get_data()
        temp_photo_path = data.get('temp_photo_path')
        if temp_photo_path and os.path.exists(temp_photo_path):
            os.unlink(temp_photo_path)
        await state.clear()
    
    user_id = callback.from_user.id
    current_balance = db.get_user_balance(user_id)

    if current_balance <= 0 and not GEMINI_DEMO_MODE:
        await callback.message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
            reply_markup=get_insufficient_balance_keyboard()
        )
        await callback.answer()
        return

    gender_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"
    await callback.message.answer(gender_text, reply_markup=get_gender_keyboard())
    await callback.answer()


async def show_main_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    main_menu_text = "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
    await message.answer(main_menu_text, reply_markup=get_main_menu_keyboard())

